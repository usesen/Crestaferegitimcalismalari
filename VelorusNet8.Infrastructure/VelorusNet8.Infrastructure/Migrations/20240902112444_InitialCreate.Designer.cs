// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VelorusNet8.Infrastructure.Data;

#nullable disable

namespace VelorusNet8.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240902112444_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DefaultShrinkageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutomationIntegrationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyBranches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Merkez",
                            BranchCode = "S001",
                            BranchName = "Ana Şube (Patron)",
                            CommissionAmount = 0m,
                            CommissionRate = 0.00m,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(8564),
                            DefaultShrinkageRate = 0.0m,
                            Email = "info@Velorus.com",
                            Fax = "555-5678",
                            IsActive = true,
                            IsAutomationIntegrationEnabled = true,
                            IsHeadOffice = true,
                            IsSalesEnabled = true,
                            Phone = "555-1234"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserAccountGroup", b =>
                {
                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserAccountId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserAccountGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserAccountId = 1,
                            GroupId = 1,
                            AssignedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9419)
                        },
                        new
                        {
                            UserAccountId = 2,
                            GroupId = 2,
                            AssignedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9421)
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9234),
                            Name = "Administrators"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9249),
                            Name = "Users"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9306),
                            Icon = "home",
                            Title = "Dashboard",
                            Url = "/dashboard"
                        },
                        new
                        {
                            MenuId = 2,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9317),
                            Icon = "settings",
                            Title = "Settings",
                            Url = "/settings"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.MenuPermission", b =>
                {
                    b.Property<int>("MenuPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuPermissionId"));

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExcel")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWord")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("MenuPermissionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("MenuPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            MenuPermissionId = 1,
                            CanDelete = true,
                            CanEdit = true,
                            CanExcel = true,
                            CanPdf = true,
                            CanView = true,
                            CanWord = true,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9369),
                            MenuId = 1,
                            UserAccountId = 1
                        },
                        new
                        {
                            MenuPermissionId = 2,
                            CanDelete = false,
                            CanEdit = false,
                            CanExcel = false,
                            CanPdf = false,
                            CanView = true,
                            CanWord = false,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9373),
                            MenuId = 1,
                            UserAccountId = 2
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("UserAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9173),
                            Email = "admin@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 9, 2, 11, 24, 44, 202, DateTimeKind.Utc).AddTicks(9183),
                            Email = "user@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");
                });

            modelBuilder.Entity("VelorusNet8.Infrastructure.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserAccountGroup", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", "UserGroup")
                        .WithMany("UserAccountGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("UserAccountGroups")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.MenuPermission", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", "UserGroup")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", "Menu")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Menu");

                    b.Navigation("UserAccount");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserBranch", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", "CompanyBranch")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", b =>
                {
                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("UserAccountGroups");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("UserAccountGroups");

                    b.Navigation("UserBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
