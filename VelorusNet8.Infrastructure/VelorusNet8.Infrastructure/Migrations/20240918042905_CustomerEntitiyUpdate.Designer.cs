// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VelorusNet8.Infrastructure.Data;

#nullable disable

namespace VelorusNet8.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240918042905_CustomerEntitiyUpdate")]
    partial class CustomerEntitiyUpdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.AngularDersleri.AngularCustomer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<decimal>("BalanceCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceDebt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("city")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("company")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("postalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("id");

                    b.ToTable("AngularCustomers", (string)null);

                    b.HasData(
                        new
                        {
                            id = 1,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5257),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "xxx sok no:2 d:15",
                            city = "Tokat",
                            company = "ABC Turizm",
                            country = "Türkiye",
                            email = "ahmet@abc.com",
                            firstName = "Ahmet",
                            lastName = "Yandan Bakar",
                            notes = "canavar manager",
                            phone = "5328457000",
                            position = "Manager",
                            postalCode = "12345"
                        },
                        new
                        {
                            id = 2,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5263),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "yyy sok no:3 d:5",
                            city = "Ankara",
                            company = "DEF Lojistik",
                            country = "Türkiye",
                            email = "mehmet@def.com",
                            firstName = "Mehmet",
                            lastName = "Yan Güler",
                            notes = "Başarılı supervisor",
                            phone = "5328457001",
                            position = "Supervisor",
                            postalCode = "54321"
                        },
                        new
                        {
                            id = 3,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5265),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "zzz sok no:8 d:10",
                            city = "İstanbul",
                            company = "GHI İnşaat",
                            country = "Türkiye",
                            email = "ayse@ghi.com",
                            firstName = "Ayşe",
                            lastName = "Gözde Bakar",
                            notes = "Yönetim dehası",
                            phone = "5328457002",
                            position = "CEO",
                            postalCode = "67890"
                        },
                        new
                        {
                            id = 4,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5268),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "aaa sok no:7 d:12",
                            city = "İzmir",
                            company = "JKL Tekstil",
                            country = "Türkiye",
                            email = "fatma@jkl.com",
                            firstName = "Fatma",
                            lastName = "Yıldız",
                            notes = "İnsan kaynakları uzmanı",
                            phone = "5328457003",
                            position = "HR Manager",
                            postalCode = "11122"
                        },
                        new
                        {
                            id = 5,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5307),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "bbb sok no:1 d:16",
                            city = "Bursa",
                            company = "MNO Gıda",
                            country = "Türkiye",
                            email = "ali@abc.com",
                            firstName = "Ali",
                            lastName = "Öztürk",
                            notes = "Satış sihirbazı",
                            phone = "5328457004",
                            position = "Satış Müdürü",
                            postalCode = "54333"
                        },
                        new
                        {
                            id = 6,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5310),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "ccc sok no:4 d:18",
                            city = "Antalya",
                            company = "PQR Bilişim",
                            country = "Türkiye",
                            email = "deniz@def.com",
                            firstName = "Deniz",
                            lastName = "Akdeniz",
                            notes = "Teknoloji gurusu",
                            phone = "5328457005",
                            position = "IT Manager",
                            postalCode = "87654"
                        },
                        new
                        {
                            id = 7,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5313),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "ddd sok no:6 d:20",
                            city = "Kocaeli",
                            company = "STU Otomotiv",
                            country = "Türkiye",
                            email = "berk@ghi.com",
                            firstName = "Berk",
                            lastName = "Kaya",
                            notes = "Operasyon ustası",
                            phone = "5328457006",
                            position = "Operasyon Müdürü",
                            postalCode = "23456"
                        },
                        new
                        {
                            id = 8,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5315),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "eee sok no:5 d:22",
                            city = "Adana",
                            company = "VWX Kimya",
                            country = "Türkiye",
                            email = "zeynep@jkl.com",
                            firstName = "Zeynep",
                            lastName = "Çelik",
                            notes = "Pazarlama uzmanı",
                            phone = "5328457007",
                            position = "Pazarlama Direktörü",
                            postalCode = "99887"
                        },
                        new
                        {
                            id = 9,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5317),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "fff sok no:9 d:24",
                            city = "Eskişehir",
                            company = "YZA Medya",
                            country = "Türkiye",
                            email = "can@abc.com",
                            firstName = "Can",
                            lastName = "Demir",
                            notes = "Medya sihirbazı",
                            phone = "5328457008",
                            position = "Medya Danışmanı",
                            postalCode = "45567"
                        },
                        new
                        {
                            id = 10,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5320),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "ggg sok no:11 d:26",
                            city = "Kayseri",
                            company = "BCD Sigorta",
                            country = "Türkiye",
                            email = "eda@def.com",
                            firstName = "Eda",
                            lastName = "Kırmızı",
                            notes = "Finans uzmanı",
                            phone = "5328457009",
                            position = "Finansal Danışman",
                            postalCode = "98765"
                        },
                        new
                        {
                            id = 11,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5322),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "hhh sok no:12 d:28",
                            city = "Gaziantep",
                            company = "EFG Turizm",
                            country = "Türkiye",
                            email = "cem@ghi.com",
                            firstName = "Cem",
                            lastName = "Yeşil",
                            notes = "Turizm dehası",
                            phone = "5328457010",
                            position = "Genel Müdür",
                            postalCode = "33221"
                        },
                        new
                        {
                            id = 12,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5324),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "iii sok no:15 d:30",
                            city = "Trabzon",
                            company = "HIJ Sağlık",
                            country = "Türkiye",
                            email = "murat@jkl.com",
                            firstName = "Murat",
                            lastName = "Altın",
                            notes = "Sağlık uzmanı",
                            phone = "5328457011",
                            position = "Sağlık Direktörü",
                            postalCode = "44122"
                        },
                        new
                        {
                            id = 13,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5327),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "jjj sok no:13 d:32",
                            city = "Muğla",
                            company = "KLM Mühendislik",
                            country = "Türkiye",
                            email = "gul@abc.com",
                            firstName = "Gül",
                            lastName = "Deniz",
                            notes = "Mühendislik sihirbazı",
                            phone = "5328457012",
                            position = "Baş Mühendis",
                            postalCode = "55667"
                        },
                        new
                        {
                            id = 14,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5329),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "kkk sok no:17 d:34",
                            city = "Mersin",
                            company = "NOP Emlak",
                            country = "Türkiye",
                            email = "selim@def.com",
                            firstName = "Selim",
                            lastName = "Toprak",
                            notes = "Emlak ustası",
                            phone = "5328457013",
                            position = "Emlak Danışmanı",
                            postalCode = "66543"
                        },
                        new
                        {
                            id = 15,
                            BalanceCredit = 0m,
                            BalanceDebt = 0m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5331),
                            Credit = 0m,
                            Debt = 0m,
                            IsActive = true,
                            address = "lll sok no:19 d:36",
                            city = "Samsun",
                            company = "QRS İnşaat",
                            country = "Türkiye",
                            email = "tuba@ghi.com",
                            firstName = "Tuba",
                            lastName = "Aslan",
                            notes = "Şantiye uzmanı",
                            phone = "5328457014",
                            position = "Şantiye Şefi",
                            postalCode = "77755"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CommissionAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DefaultShrinkageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAutomationIntegrationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadOffice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSalesEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyBranches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Merkez",
                            BranchCode = "S001",
                            BranchName = "Ana Şube (Patron)",
                            CommissionAmount = 0m,
                            CommissionRate = 0.00m,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(4809),
                            DefaultShrinkageRate = 0.0m,
                            Email = "info@Velorus.com",
                            Fax = "555-5678",
                            IsActive = true,
                            IsAutomationIntegrationEnabled = true,
                            IsHeadOffice = true,
                            IsSalesEnabled = true,
                            Phone = "555-1234"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserAccountGroup", b =>
                {
                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserAccountId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserAccountGroups", (string)null);

                    b.HasData(
                        new
                        {
                            UserAccountId = 1,
                            GroupId = 1,
                            AssignedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5211)
                        },
                        new
                        {
                            UserAccountId = 2,
                            GroupId = 2,
                            AssignedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5213)
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5105),
                            Name = "Administrators"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5113),
                            Name = "Users"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentMenuId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("MenuId");

                    b.HasIndex("ParentMenuId");

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5147),
                            Icon = "home",
                            Title = "Dashboard",
                            Url = "/dashboard"
                        },
                        new
                        {
                            MenuId = 2,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5153),
                            Icon = "settings",
                            Title = "Settings",
                            Url = "/settings"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.MenuPermission", b =>
                {
                    b.Property<int>("MenuPermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuPermissionId"));

                    b.Property<bool>("CanDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("bit");

                    b.Property<bool>("CanExcel")
                        .HasColumnType("bit");

                    b.Property<bool>("CanPdf")
                        .HasColumnType("bit");

                    b.Property<bool>("CanView")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWord")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("MenuPermissionId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MenuId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("MenuPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            MenuPermissionId = 1,
                            CanDelete = true,
                            CanEdit = true,
                            CanExcel = true,
                            CanPdf = true,
                            CanView = true,
                            CanWord = true,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5180),
                            MenuId = 1,
                            UserAccountId = 1
                        },
                        new
                        {
                            MenuPermissionId = 2,
                            CanDelete = false,
                            CanEdit = false,
                            CanExcel = false,
                            CanPdf = false,
                            CanView = true,
                            CanWord = false,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5183),
                            MenuId = 1,
                            UserAccountId = 2
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("UserAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5072),
                            Email = "admin@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            UserName = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 9, 18, 4, 29, 3, 191, DateTimeKind.Utc).AddTicks(5075),
                            Email = "user@example.com",
                            IsActive = true,
                            PasswordHash = "hashedpassword",
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");
                });

            modelBuilder.Entity("VelorusNet8.Infrastructure.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Request")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserAccountGroup", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", "UserGroup")
                        .WithMany("UserAccountGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("UserAccountGroups")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAccount");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", "ParentMenu")
                        .WithMany("SubMenus")
                        .HasForeignKey("ParentMenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentMenu");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.MenuPermission", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", "UserGroup")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", "Menu")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("MenuPermissions")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Menu");

                    b.Navigation("UserAccount");

                    b.Navigation("UserGroup");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserBranch", b =>
                {
                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", "CompanyBranch")
                        .WithMany("UserBranches")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", "UserAccount")
                        .WithMany("UserBranches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyBranch");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Branchs.CompanyBranch", b =>
                {
                    b.Navigation("UserBranches");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Groups.UserGroup", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("UserAccountGroups");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Menus.Menu", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("SubMenus");
                });

            modelBuilder.Entity("VelorusNet8.Domain.Entities.Aggregates.Users.UserAccount", b =>
                {
                    b.Navigation("MenuPermissions");

                    b.Navigation("UserAccountGroups");

                    b.Navigation("UserBranches");
                });
#pragma warning restore 612, 618
        }
    }
}
